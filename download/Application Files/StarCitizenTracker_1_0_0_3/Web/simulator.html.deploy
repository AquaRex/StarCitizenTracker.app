<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Log Simulator</title>
    <style>
        :root {
            --color-light: #aba9a2;
            --color-dark: #18140c;
            --accent-color: #d05252;
            --primary-color: var(--color-dark);
            --secondary-color: var(--color-light);
        }

        body.dark-mode {
            --primary-color: var(--color-dark);
            --secondary-color: var(--color-light);
        }

        body.light-mode {
            --primary-color: var(--color-light);
            --secondary-color: var(--color-dark);
        }

        ::-webkit-scrollbar {
            width: 12px;
        }

        ::-webkit-scrollbar-track {
            background: var(--primary-color);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--secondary-color);
            border: 2px solid var(--primary-color);
            cursor: pointer;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--secondary-color);
            opacity: 0.8;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background: var(--primary-color);
            color: var(--secondary-color);
            overflow: hidden;
            -webkit-user-select: none;
            user-select: none;
        }

        .main-container {
            width: 100vw;
            height: 100vh;
            background: var(--primary-color);
            border: 2px solid var(--secondary-color);
            box-sizing: border-box;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        /* Window Controls */
        .window-controls {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            gap: 20px;
            z-index: 1000;
        }

        .window-btn {
            width: 25px;
            height: 25px;
            background-color: transparent;
            border: 2px solid var(--secondary-color);
            color: var(--secondary-color);
            cursor: pointer;
            font-size: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
            outline: none;
            padding: 0;
        }

        .window-btn:hover {
            background-color: var(--secondary-color);
            color: var(--primary-color);
        }

        /* Title */
        .title {
            font-size: 14px;
            letter-spacing: 4px;
            text-transform: uppercase;
            opacity: 0.7;
            margin-bottom: 15px;
            color: var(--secondary-color);
        }

        /* Control Panel */
        .control-panel {
            display: flex;
            gap: 15px;
            align-items: center;
            padding: 12px;
            border: 2px solid var(--secondary-color);
            margin-bottom: 15px;
            flex-shrink: 0;
        }

        .btn {
            padding: 6px 12px;
            background: transparent;
            border: 2px solid var(--secondary-color);
            color: var(--secondary-color);
            cursor: pointer;
            font-size: 11px;
            letter-spacing: 2px;
            transition: all 0.2s;
            outline: none;
        }

        .btn:hover:not(:disabled) {
            background: var(--secondary-color);
            color: var(--primary-color);
        }

        .btn:disabled {
            opacity: 0.3;
            cursor: not-allowed;
        }

        .btn.primary {
            background: var(--accent-color);
            border-color: var(--accent-color);
            color: var(--primary-color);
        }

        .btn.primary:hover:not(:disabled) {
            opacity: 0.8;
        }

        .status-text {
            font-size: 11px;
            letter-spacing: 2px;
            opacity: 0.7;
            flex: 1;
        }

        /* Log Container */
        .log-container {
            border: 2px solid var(--secondary-color);
            flex: 1;
            overflow-y: auto;
            overflow-x: hidden;
            position: relative;
        }

        .log-line {
            padding: 2px 6px;
            border-bottom: 1px solid var(--secondary-color);
            cursor: pointer;
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 9px;
            transition: background 0.1s;
            user-select: none;
            line-height: 1.1;
        }

        .log-line:hover {
            background: rgba(171, 169, 162, 0.1);
        }

        .log-line.selected {
            background: var(--accent-color);
            color: var(--primary-color);
        }

        .log-line.current {
            background: rgba(208, 82, 82, 0.5);
        }

        .line-number {
            display: inline-block;
            width: 50px;
            opacity: 0.5;
            font-weight: bold;
        }

        /* Progress Bar */
        .progress-container {
            margin-top: 15px;
            padding: 12px;
            border: 2px solid var(--secondary-color);
            flex-shrink: 0;
        }

        .progress-bar {
            width: 100%;
            height: 16px;
            background: rgba(171, 169, 162, 0.1);
            border: 1px solid var(--secondary-color);
            position: relative;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: var(--accent-color);
            width: 0%;
            transition: width 0.2s;
        }

        .status-bar {
            margin-top: 8px;
            font-size: 10px;
            opacity: 0.7;
            letter-spacing: 1px;
        }
    </style>
</head>
<body>
    <div class="main-container">
        <!-- Window Controls -->
        <div class="window-controls">
            <button class="window-btn" id="closeBtn" title="Close">×</button>
        </div>

        <!-- Title -->
        <div class="title">LOG SIMULATOR</div>

        <!-- Control Panel -->
        <div class="control-panel">
            <button class="btn primary" id="startBtn">▶ START</button>
            <button class="btn" id="stopBtn" disabled>⏹ STOP</button>
            <div class="status-text" id="statusText">READY</div>
        </div>

        <!-- Log Container -->
        <div class="log-container" id="logContainer">
            <!-- Log lines will be added here dynamically -->
        </div>

        <!-- Progress Bar -->
        <div class="progress-container">
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <div class="status-bar" id="statusBar">Waiting to start simulation...</div>
        </div>
    </div>

    <script>
        let logLines = [];
        let selectedStartIndex = -1;
        let selectedEndIndex = -1;
        let currentLineIndex = -1;
        let isDragging = false;

        function sendToCS(data) {
            if (window.chrome && window.chrome.webview) {
                window.chrome.webview.postMessage(data);
            }
        }

        function initialize() {
            document.getElementById('closeBtn').addEventListener('click', () => {
                sendToCS({ action: 'close' });
            });

            document.getElementById('startBtn').addEventListener('click', () => {
                sendToCS({ action: 'start' });
            });

            document.getElementById('stopBtn').addEventListener('click', () => {
                sendToCS({ action: 'stop' });
            });

            const container = document.getElementById('logContainer');
            container.addEventListener('mouseup', handleContainerMouseUp);
            container.addEventListener('mouseleave', handleContainerMouseUp);

            // Enable dragging
            document.addEventListener('mousedown', (e) => {
                if (e.target.closest('.window-btn') || e.target.closest('.log-container') || e.target.closest('.btn')) {
                    return;
                }
                sendToCS({ action: 'startDrag' });
            });

            if (window.chrome && window.chrome.webview) {
                window.chrome.webview.addEventListener('message', messageHandler);
            }
        }

        function messageHandler(event) {
            const data = event.data;

            if (data.action === 'loadTheme') {
                const isDarkMode = data.darkMode !== false;
                if (isDarkMode) {
                    document.body.classList.add('dark-mode');
                    document.body.classList.remove('light-mode');
                } else {
                    document.body.classList.add('light-mode');
                    document.body.classList.remove('dark-mode');
                }
            }

            if (data.action === 'loadLines') {
                loadLogLines(data.lines);
            }

            if (data.action === 'highlightLine') {
                highlightCurrentLine(data.lineIndex);
            }

            if (data.action === 'updateProgress') {
                updateProgress(data.lineNumber, data.totalLines);
            }

            if (data.action === 'updateStatus') {
                updateStatus(data.status, data.message);
            }

            if (data.action === 'clearSelection') {
                clearSelection();
            }
        }

        function loadLogLines(lines) {
            logLines = lines;
            const container = document.getElementById('logContainer');
            container.innerHTML = '';

            lines.forEach((line, index) => {
                const lineDiv = document.createElement('div');
                lineDiv.className = 'log-line';
                lineDiv.innerHTML = `<span class="line-number">${index + 1}:</span>${escapeHtml(line)}`;
                lineDiv.dataset.index = index;

                lineDiv.addEventListener('mousedown', handleLineMouseDown);
                lineDiv.addEventListener('mouseenter', handleLineMouseEnter);

                container.appendChild(lineDiv);
            });

            document.getElementById('statusBar').textContent = `Loaded ${lines.length} lines`;
        }

        function handleLineMouseDown(e) {
            isDragging = true;
            const index = parseInt(e.currentTarget.dataset.index);
            selectedStartIndex = index;
            selectedEndIndex = index;
            updateSelectionDisplay();
            e.preventDefault();
        }

        function handleLineMouseEnter(e) {
            if (!isDragging) return;
            const index = parseInt(e.currentTarget.dataset.index);
            selectedEndIndex = index;
            updateSelectionDisplay();
        }

        function handleContainerMouseUp() {
            if (!isDragging) return;
            isDragging = false;

            const start = Math.min(selectedStartIndex, selectedEndIndex);
            const end = Math.max(selectedStartIndex, selectedEndIndex);

            sendToCS({
                action: 'executeLines',
                startLine: start,
                endLine: end
            });
        }

        function updateSelectionDisplay() {
            const lines = document.querySelectorAll('.log-line');
            const start = Math.min(selectedStartIndex, selectedEndIndex);
            const end = Math.max(selectedStartIndex, selectedEndIndex);

            lines.forEach((line, index) => {
                if (index >= start && index <= end) {
                    line.classList.add('selected');
                } else if (index !== currentLineIndex) {
                    line.classList.remove('selected');
                }
            });
        }

        function highlightCurrentLine(lineIndex) {
            const lines = document.querySelectorAll('.log-line');
            
            // Clear previous current line
            if (currentLineIndex >= 0 && currentLineIndex < lines.length) {
                lines[currentLineIndex].classList.remove('current');
            }

            // Highlight new current line
            if (lineIndex >= 0 && lineIndex < lines.length) {
                lines[lineIndex].classList.add('current');
                currentLineIndex = lineIndex;

                // Scroll into view
                lines[lineIndex].scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }

        function updateProgress(lineNumber, totalLines) {
            const progress = (lineNumber / totalLines) * 100;
            document.getElementById('progressFill').style.width = progress + '%';
            document.getElementById('statusText').textContent = `LINE ${lineNumber}/${totalLines}`;
            document.getElementById('statusBar').textContent = `Processing line ${lineNumber} of ${totalLines} - ${Math.round(progress)}% complete`;
        }

        function updateStatus(status, message) {
            const startBtn = document.getElementById('startBtn');
            const stopBtn = document.getElementById('stopBtn');
            const statusText = document.getElementById('statusText');
            const statusBar = document.getElementById('statusBar');

            switch (status) {
                case 'started':
                    startBtn.disabled = true;
                    stopBtn.disabled = false;
                    statusText.textContent = 'RUNNING...';
                    statusBar.textContent = message || 'Simulation started';
                    break;

                case 'stopped':
                    startBtn.disabled = false;
                    stopBtn.disabled = true;
                    statusText.textContent = 'STOPPED';
                    statusBar.textContent = message || 'Simulation stopped';
                    break;

                case 'completed':
                    startBtn.disabled = false;
                    stopBtn.disabled = true;
                    statusText.textContent = 'COMPLETED';
                    document.getElementById('progressFill').style.width = '100%';
                    statusBar.textContent = message || 'Simulation completed successfully';
                    break;

                case 'error':
                    startBtn.disabled = false;
                    stopBtn.disabled = true;
                    statusText.textContent = 'ERROR';
                    statusBar.textContent = message || 'An error occurred';
                    break;

                case 'executing':
                    statusBar.textContent = message || 'Executing selected lines...';
                    break;
            }
        }

        function clearSelection() {
            selectedStartIndex = -1;
            selectedEndIndex = -1;
            const lines = document.querySelectorAll('.log-line');
            lines.forEach(line => line.classList.remove('selected'));
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initialize);
        } else {
            initialize();
        }
    </script>
</body>
</html>
