<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kill Log</title>
    <link rel="stylesheet" href="shared/theme.css">
    <link rel="stylesheet" href="shared/killlog-styles.css">
</head>
<body>
    <div class="window-container" id="windowContainer">
        <!-- Window Controls -->
        <div class="window-controls">
            <button class="window-btn lock-btn" id="lockBtn" title="Lock Overlay">
                <svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                    <rect x="4" y="7" width="8" height="7" rx="1" stroke-width="1.5" fill="none"/>
                    <path d="M 5.5 7 L 5.5 5 C 5.5 3.6 6.6 2.5 8 2.5 C 9.4 2.5 10.5 3.6 10.5 5 L 10.5 7" stroke-width="1.5" fill="none"/>
                </svg>
            </button>
            <button class="window-btn" id="closeBtn" title="Close">Ã—</button>
        </div>

        <!-- Title -->
        <div class="title">KILL LOG</div>

        <!-- Content Area -->
        <div class="content-area" id="contentArea">
            <!-- Kill entries will be added here dynamically -->
        </div>
    </div>

    <script src="shared/killlog-renderer.js"></script>
    <script>
        let isLocked = false;
        let renderer = null;

        function sendToCS(data) {
            if (window.chrome && window.chrome.webview) {
                window.chrome.webview.postMessage(data);
            }
        }

        function initialize() {
            // Initialize the renderer
            const contentElement = document.getElementById('contentArea');
            renderer = new KillLogRenderer(contentElement, {
                displayDuration: 30000,
                displayWeapon: true,
                playerIngameName: '',
                playerDisplayName: '',
                maxEntries: 5
            });

            document.getElementById('lockBtn').addEventListener('click', () => {
                sendToCS({ action: 'lock' });
            });

            document.getElementById('closeBtn').addEventListener('click', () => {
                sendToCS({ action: 'close' });
            });

            document.addEventListener('mousedown', (e) => {
                if (e.target.closest('.window-btn')) {
                    return;
                }
                
                if (e.clientX > window.innerWidth - 20) {
                    return;
                }
                
                sendToCS({ action: 'startDrag' });
            });

            if (window.chrome && window.chrome.webview) {
                window.chrome.webview.addEventListener('message', messageHandler);
            }
        }

        function messageHandler(event) {
            const data = event.data;

            if (data.action === 'loadTheme') {
                const isDarkMode = data.darkMode !== false;
                if (isDarkMode) {
                    document.body.classList.add('dark-mode');
                    document.body.classList.remove('light-mode');
                } else {
                    document.body.classList.add('light-mode');
                    document.body.classList.remove('dark-mode');
                }
            }

            if (data.action === 'lockStateChanged') {
                isLocked = data.isLocked;
                const container = document.getElementById('windowContainer');
                const lockBtn = document.getElementById('lockBtn');
                
                if (isLocked) {
                    container.classList.add('locked');
                    document.body.classList.add('locked');
                    lockBtn.innerHTML = '<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><rect x="4" y="7" width="8" height="7" rx="1" stroke-width="1.5" fill="none"/><path d="M 5.5 7 L 5.5 5 C 5.5 3.6 6.6 2.5 8 2.5 C 9.4 2.5 10.5 3.6 10.5 5 L 10.5 7" stroke-width="1.5" fill="none"/></svg>';
                } else {
                    container.classList.remove('locked');
                    document.body.classList.remove('locked');
                    lockBtn.innerHTML = '<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><rect x="4" y="7" width="8" height="7" rx="1" stroke-width="1.5" fill="none"/><path d="M 5.5 7 L 5.5 5 C 5.5 3.6 6.6 2.5 8 2.5 C 9.4 2.5 10.5 3.6 10.5 5 L 10.5 7" stroke-width="1.5" fill="none"/></svg>';
                }
            }

            if (data.action === 'addKill') {
                renderer.addKillEntry(data.killer, data.victim, data.weapon, data.isPlayerKill);
            }

            if (data.action === 'setDisplayDuration') {
                renderer.setConfig({ displayDuration: data.duration * 1000 });
            }

            if (data.action === 'setDisplayWeapon') {
                renderer.setConfig({ displayWeapon: data.displayWeapon });
            }

            if (data.action === 'setPlayerNames') {
                renderer.setConfig({ 
                    playerIngameName: data.ingameName,
                    playerDisplayName: data.displayName 
                });
            }

            if (data.action === 'clearKills') {
                renderer.clear();
            }

            if (data.action === 'showExamples') {
                const duration = data.duration || 120000;
                renderer.addKillEntry('Player1', 'EnemyPilot', 'Klaus & Werner Arrowhead Sniper Rifle', false);
                setTimeout(() => {
                    renderer.addKillEntry('YourName', 'OpposingForce', 'Kastak Arms Devastator Shotgun', true);
                }, 1000);
                setTimeout(() => {
                    renderer.addKillEntry('AllyFighter', 'HostileTarget', 'Energy Weapon', false);
                }, 2000);
                setTimeout(() => {
                    renderer.addKillEntry('Enemy2', 'YourName', 'Ballistic Damage', false);
                }, 3000);
                setTimeout(() => {
                    renderer.addKillEntry('YourName', 'Enemy3', 'Gemini F55 LMG', true);
                }, 4000);

                // Clear examples after duration
                setTimeout(() => {
                    renderer.clear();
                }, duration);
            }
        }

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initialize);
        } else {
            initialize();
        }
    </script>
</body>
</html>
