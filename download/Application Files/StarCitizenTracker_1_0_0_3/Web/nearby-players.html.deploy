<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nearby Players</title>
    <style>
        :root {
            --color-light: #aba9a2;
            --color-dark: #18140c;
            --accent-color: #d05252;
            --primary-color: var(--color-dark);
            --secondary-color: var(--color-light);
        }

        body.dark-mode {
            --primary-color: var(--color-dark);
            --secondary-color: var(--color-light);
        }

        body.light-mode {
            --primary-color: var(--color-light);
            --secondary-color: var(--color-dark);
        }

        ::-webkit-scrollbar {
            width: 12px;
        }

        ::-webkit-scrollbar-track {
            background: var(--primary-color);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--secondary-color);
            border: 2px solid var(--primary-color);
            cursor: pointer;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--secondary-color);
            opacity: 0.8;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background: var(--primary-color);
            color: var(--secondary-color);
            overflow: hidden;
            -webkit-user-select: none;
            user-select: none;
            padding: 0;
            margin: 0;
        }
        
        body.locked {
            background: transparent;
        }

        .window-container {
            width: 100vw;
            height: 100vh;
            background-color: var(--primary-color);
            border: 2px solid var(--secondary-color);
            position: relative;
        }

        .window-container.locked {
            background-color: transparent !important;
            border: none;
        }

        /* Hide content area when empty, not the whole window */
        .window-container.empty .content-area {
            opacity: 0.3;
        }

        /* Window Controls */
        .window-controls {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            gap: 20px;
            z-index: 1000;
        }

        .window-container.locked .window-controls {
            display: none;
        }

        .window-btn {
            width: 25px;
            height: 25px;
            background-color: transparent;
            border: 2px solid var(--secondary-color);
            color: var(--secondary-color);
            cursor: pointer;
            font-size: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
            outline: none;
            padding: 0;
        }

        .window-btn:hover {
            background-color: var(--secondary-color);
        }

        .window-btn:hover svg {
            fill: none;
            stroke: var(--primary-color);
        }

        .lock-btn svg {
            width: 12px;
            height: 12px;
            fill: none;
            stroke: var(--secondary-color);
        }

        /* Title */
        .title {
            position: absolute;
            top: 20px;
            left: 20px;
            font-size: 14px;
            letter-spacing: 4px;
            text-transform: uppercase;
            opacity: 0.7;
            color: var(--secondary-color);
            z-index: 1000;
            pointer-events: none;
        }

        .window-container.locked .title {
            display: none;
        }

        /* Content Area */
        .content-area {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            padding: 20px;
            overflow-y: auto;
        }

        .player-entry {
            padding: 12px 0;
            border-bottom: 1px solid rgba(171, 169, 162, 0.2);
        }

        .player-entry:last-child {
            border-bottom: none;
        }

        .player-name {
            color: var(--accent-color);
            font-size: 14px;
            font-weight: bold;
            letter-spacing: 1px;
            margin-bottom: 5px;
        }

        .player-info {
            font-size: 11px;
            letter-spacing: 1px;
            opacity: 0.6;
        }
    </style>
</head>
<body>
    <div class="window-container empty" id="windowContainer">
        <!-- Window Controls -->
        <div class="window-controls">
            <button class="window-btn lock-btn" id="lockBtn">
                <svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
                    <rect x="4" y="7" width="8" height="7" rx="1" stroke-width="1.5" fill="none"/>
                    <path d="M 5.5 7 L 5.5 5 C 5.5 3.6 6.6 2.5 8 2.5 C 9.4 2.5 10.5 3.6 10.5 5 L 10.5 7" stroke-width="1.5" fill="none"/>
                </svg>
            </button>
            <button class="window-btn" id="closeBtn">Ã—</button>
        </div>

        <!-- Title -->
        <div class="title">NEARBY PLAYERS</div>

        <!-- Content Area -->
        <div class="content-area" id="contentArea">
        </div>
    </div>

    <script>
        let isLocked = false;
        let players = new Map();

        function sendToCS(data) {
            if (window.chrome && window.chrome.webview) {
                window.chrome.webview.postMessage(data);
            }
        }

        function initialize() {
            document.getElementById('lockBtn').addEventListener('click', () => {
                sendToCS({ action: 'lock' });
            });

            document.getElementById('closeBtn').addEventListener('click', () => {
                sendToCS({ action: 'close' });
            });

            document.addEventListener('mousedown', (e) => {
                if (e.target.closest('.window-btn')) {
                    return;
                }
                
                if (e.clientX > window.innerWidth - 20) {
                    return;
                }
                
                sendToCS({ action: 'startDrag' });
            });

            if (window.chrome && window.chrome.webview) {
                window.chrome.webview.addEventListener('message', messageHandler);
            }

            setInterval(() => {
                if (players.size > 0) {
                    render();
                }
            }, 1000);
        }

        function messageHandler(event) {
            const data = event.data;

            if (data.action === 'loadTheme') {
                const isDarkMode = data.darkMode !== false;
                if (isDarkMode) {
                    document.body.classList.add('dark-mode');
                    document.body.classList.remove('light-mode');
                } else {
                    document.body.classList.add('light-mode');
                    document.body.classList.remove('dark-mode');
                }
            }

            if (data.action === 'lockStateChanged') {
                isLocked = data.isLocked;
                const container = document.getElementById('windowContainer');
                const lockBtn = document.getElementById('lockBtn');
                
                if (isLocked) {
                    container.classList.add('locked');
                    document.body.classList.add('locked');
                    lockBtn.innerHTML = '<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><rect x="4" y="7" width="8" height="7" rx="1" stroke-width="1.5" fill="none"/><path d="M 5.5 7 L 5.5 5 C 5.5 3.6 6.6 2.5 8 2.5 C 9.4 2.5 10.5 3.6 10.5 5 L 10.5 7" stroke-width="1.5" fill="none"/></svg>';
                } else {
                    container.classList.remove('locked');
                    document.body.classList.remove('locked');
                    lockBtn.innerHTML = '<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><rect x="4" y="7" width="8" height="7" rx="1" stroke-width="1.5" fill="none"/><path d="M 5.5 7 L 5.5 5 C 5.5 3.6 6.6 2.5 8 2.5 C 9.4 2.5 10.5 3.6 10.5 5 L 10.5 7" stroke-width="1.5" fill="none"/></svg>';
                }
            }

            if (data.action === 'addPlayer') {
                addPlayer(data.playerName, data.stallType, data.stallLength);
            }

            if (data.action === 'removePlayer') {
                players.delete(data.playerName);
                render();
            }

            if (data.action === 'clearPlayers') {
                players.clear();
                render();
            }

            if (data.action === 'updatePlayers') {
                players.clear();
                data.players.forEach(p => {
                    players.set(p.name, {
                        name: p.name,
                        lastSeen: p.lastSeen,
                        count: p.count
                    });
                });
                render();
            }

            if (data.action === 'showExamples') {
                const duration = data.duration || 120000;
                
                // Add example players
                addPlayer('Player1', 'Nearby', 'Short');
                setTimeout(() => addPlayer('Player2', 'Nearby', 'Medium'), 500);
                setTimeout(() => addPlayer('Player3', 'Nearby', 'Long'), 1000);
                setTimeout(() => addPlayer('AllyName', 'Nearby', 'Short'), 1500);

                // Clear examples after duration
                setTimeout(() => {
                    players.clear();
                    render();
                }, duration);
            }
        }

        function addPlayer(playerName, stallType, stallLength) {
            const now = Date.now();
            
            if (players.has(playerName)) {
                const player = players.get(playerName);
                player.lastSeen = now;
                player.count++;
            } else {
                players.set(playerName, {
                    name: playerName,
                    lastSeen: now,
                    count: 1
                });
            }

            render();
        }

        function render() {
            const content = document.getElementById('contentArea');
            const container = document.getElementById('windowContainer');
            
            content.innerHTML = '';

            if (players.size === 0) {
                container.classList.add('empty');
                return;
            }

            container.classList.remove('empty');

            const sorted = Array.from(players.values()).sort((a, b) => b.lastSeen - a.lastSeen);

            sorted.forEach(player => {
                const timeSince = Date.now() - player.lastSeen;
                const timeText = timeSince < 60000 
                    ? Math.floor(timeSince / 1000) + 's ago'
                    : Math.floor(timeSince / 60000) + 'm ago';

                const entry = document.createElement('div');
                entry.className = 'player-entry';
                entry.innerHTML = `
                    <div class="player-name">${player.name}</div>
                    <div class="player-info">${timeText} â€¢ x${player.count}</div>
                `;
                content.appendChild(entry);
            });
        }

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initialize);
        } else {
            initialize();
        }
    </script>
</body>
</html>
