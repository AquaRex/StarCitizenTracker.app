<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kill Log - OBS</title>
    <link rel="stylesheet" href="shared/killlog-styles.css">
    <style>
        body {
            background: transparent;
        }

        .content-area {
            padding: 20px;
            display: flex;
            flex-direction: column-reverse;
            gap: 8px;
            align-items: flex-start;
            position: static;
        }
    </style>
</head>
<body>
    <div class="content-area" id="content"></div>

    <script src="shared/killlog-renderer.js"></script>
    <script>
        let renderer = null;
        let eventSource = null;
        let reconnectAttempts = 0;
        const maxReconnectDelay = 30000; // Max 30 seconds

        // Get config from URL parameters (optional)
        const urlParams = new URLSearchParams(window.location.search);
        const displayDuration = urlParams.has('duration') ? parseInt(urlParams.get('duration')) * 1000 : 30000;
        const displayWeapon = urlParams.has('weapon') ? urlParams.get('weapon') === 'true' : true;
        const playerIngameName = urlParams.get('ingameName') || '';
        const playerDisplayName = urlParams.get('displayName') || '';

        // Initialize renderer
        const contentElement = document.getElementById('content');
        renderer = new KillLogRenderer(contentElement, {
            displayDuration,
            displayWeapon,
            playerIngameName,
            playerDisplayName,
            maxEntries: 5
        });

        function connectSSE() {
            if (eventSource) {
                eventSource.close();
            }

            console.log('Connecting to SSE...');
            eventSource = new EventSource('/events');

            eventSource.addEventListener('config', (event) => {
                console.log('Received config:', event.data);
                const data = JSON.parse(event.data);
                renderer.setConfig({
                    playerIngameName: data.playerIngameName,
                    playerDisplayName: data.playerDisplayName,
                    displayWeapon: data.displayWeapon,
                    displayDuration: data.displayDuration
                });
                reconnectAttempts = 0; // Reset on successful connection
            });

            eventSource.addEventListener('kill', (event) => {
                console.log('Received kill:', event.data);
                const data = JSON.parse(event.data);
                renderer.addKillEntry(data.killer, data.victim, data.weapon, data.isPlayerKill);
            });

            eventSource.addEventListener('examples', (event) => {
                console.log('Received examples:', event.data);
                const data = JSON.parse(event.data);
                const duration = data.duration || 120000;
                
                renderer.addKillEntry('Player1', 'EnemyPilot', 'Klaus & Werner Arrowhead Sniper Rifle', false);
                setTimeout(() => {
                    renderer.addKillEntry('YourName', 'OpposingForce', 'Kastak Arms Devastator Shotgun', true);
                }, 1000);
                setTimeout(() => {
                    renderer.addKillEntry('AllyFighter', 'HostileTarget', 'Energy Weapon', false);
                }, 2000);
                setTimeout(() => {
                    renderer.addKillEntry('Enemy2', 'YourName', 'Ballistic Damage', false);
                }, 3000);
                setTimeout(() => {
                    renderer.addKillEntry('YourName', 'Enemy3', 'Gemini F55 LMG', true);
                }, 4000);

                // Clear examples after duration
                setTimeout(() => {
                    renderer.clear();
                }, duration);
            });

            eventSource.addEventListener('ping', (event) => {
                // Keep-alive ping, ignore
            });

            eventSource.onopen = () => {
                console.log('SSE connection opened');
            };

            eventSource.onerror = (error) => {
                console.error('SSE connection error, retrying...', error);
                eventSource.close();
                
                // Exponential backoff: 1s, 2s, 4s, 8s, 16s, 30s...
                reconnectAttempts++;
                const delay = Math.min(1000 * Math.pow(2, reconnectAttempts - 1), maxReconnectDelay);
                
                console.log(`Retrying in ${delay}ms...`);
                setTimeout(() => {
                    connectSSE();
                }, delay);
            };
        }

        // Connect immediately
        connectSSE();
    </script>
</body>
</html>
